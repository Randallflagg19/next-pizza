generator client {
    provider = "prisma-client-js"
}

datasource  db {
    provider = "postgresql"
    url = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

// юзер
model User {
    id Int @id @default(autoincrement())

    fullName String
    email String @unique
    password String
    role UserRole @default(USER)
    verified DateTime?

    provider String?
    providerId String?

    cart Cart?
    order Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// категория еды, в нее входят готовые продукты
model Category {
    id Int @unique @default(autoincrement())

    name String @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// продукт относится к категории
// в продукт входят ингридиенты и допы
model  Product {
    id Int @id @default(autoincrement())

    name String
    imageUrl String

    ingredients Ingredient[]
    items ProductVariant[]

    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// продукт кастомизированный или нет
model ProductVariant  {
    id Int @id @default(autoincrement())

    price Int
    size Int?
    doughType Int?

    cartItems CartItem[]

    product Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// ингридиент
model Ingredient {
    id Int @id @default(autoincrement())

    name String
    price Int
    imageUrl String

    products Product[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// корзина
model Cart{
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int? @unique

    token String

    items CartItem[]

    totalAmount Int @default(0)


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// корзина
model CartItem {
    id Int @id @default(autoincrement())

    // cart Cart @relation(fields: [cartId], references: [id])
    cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId Int

    productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
    productVariantId Int

    ingredients Ingredient[]

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId],references: [id])
    userId Int?

    token String

    totalAmount Int
    status OrderStatus
    paymentId String?

    items Json

    fullName String
    email String
    phone String
    address String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId],references: [id])
    userId Int @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story Story @relation(fields: [storyId], references: [id])

    sourceUrl String
    createdAt DateTime @default(now())
}

model Story {
    id Int @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}

enum OrderStatus{
    PENDING
    SUCEEDED
    CANCELLED
}

enum UserRole{
    USER
    ADMIN
}

